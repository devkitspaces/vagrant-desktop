# -*- mode: ruby -*-
# vi: set ft=ruby :
require 'getoptlong'
require 'yaml'

# ---------------------------------------
# Plugins
# ---------------------------------------
#if !Vagrant.has_plugin?('vagrant-vbguest')
#  puts 'vagrant-vbguest plugin required. To install simply do `vagrant plugin install vagrant-vbguest`'
#  abort
#end

# ---------------------------------------
# Libraries
# ---------------------------------------
root_dir = File.dirname(__FILE__)
lib_dir = 'lib'
lib_path = "#{root_dir}/#{lib_dir}"

if File.exist?( lib_path )
  lib_files = Dir.glob( "#{lib_path}/*.rb") 
  lib_files && lib_files.each do |files|
    require_relative "#{lib_dir}/#{File.basename( files, '.rb' )}"
  end
end

# ---------------------------------------
# Header
# ---------------------------------------
Vagrant.require_version ">= 1.6.0"
VAGRANTFILE_API_VERSION = "2"

# ---------------------------------------
# Parameters
# ---------------------------------------
params = read_options()

require_arg("name", params['name'])
require_arg("env-file", params['env-file'])

p_name=params['name']
p_envfile=params['env-file']

# ---------------------------------------
# Settings
# ---------------------------------------
envfile = File.expand_path(p_envfile)
puts "using definition file: #{envfile}"
settings = read_settings(envfile)

# ---------------------------------------
# Definition
# ---------------------------------------

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  config.vm.box = "bento/ubuntu-16.04"
  config.vm.hostname = p_name
  config.ssh.forward_agent = true  

  config.vm.synced_folder "../", "/opt/vagrant"
  config.vm.synced_folder "../../../", "/home/vagrant/repositories"

  # 
  # Virtualbox configuration
  #
  config.vm.provider :virtualbox do |vb|
      vb.gui = true

      vb.name = settings['name']

      vb.customize ["modifyvm", :id, "--cpus", "2"]
      vb.customize ["modifyvm", :id, "--memory", "2048"]
      vb.customize ["modifyvm", :id, "--graphicscontroller", "vboxvga"]
      vb.customize ["modifyvm", :id, "--vram", "128"]

      vb.customize ["modifyvm", :id, "--hwvirtex", "on"]
      vb.customize ["modifyvm", :id, "--accelerate3d", "on"]
      vb.customize ["modifyvm", :id, "--ioapic", "on"]
  end

  # Prevent TTY Errors (copied from laravel/homestead: "homestead.rb" file)... By default this is "bash -l".
  config.ssh.shell = "bash -c 'BASH_ENV=/etc/profile exec bash'"
  
  # ---------------------------------------
  # Provisioning
  # ---------------------------------------  
  config.vm.provision :shell, :path => File.join( "packaging", "prepare.sh" )
  
  # provison-pre.sh
  #
  # provison-pre.sh acts as a pre-hook to the default provisioning script.
  #if File.exists?(File.join(VAGRANT_DIR,'provision','provision-pre.sh')) then
  #  config.vm.provision :shell, :path => File.join( "provision", "provision-pre.sh" )
  #end

  # prepare.sh
  #
  # prepare.sh prepares the desktop environment for provisioning by setting up essential components.
  #config.vm.provision :shell, :path => File.join( "packaging", "prepare.sh" )

  # environments
  #
  # The environments scripts provision a desktop environment based on the provided `VM_DESKTOP` parameter.
  #config.vm.provision :shell, :path => File.join( "packaging", "environments", "#{settings['VM_DESKTOP']}.sh" )

  # provision.sh
  #
  # prepare.sh provisions the environment.
  #if File.exists?(File.join(VAGRANT_DIR,'provision','provision.sh')) then
  #  config.vm.provision :shell, :path => File.join( "provision", "provision.sh" )
  #end

  # provision-post.sh
  #
  # provison-pre.sh acts as a post-hook to the default provisioning script.
  #if File.exists?(File.join(VAGRANT_DIR,'provision','provision-post.sh')) then
  #  config.vm.provision :shell, :path => File.join( "provision", "provision-post.sh" )
  #end

  #
  # End of Provision
  # 
end